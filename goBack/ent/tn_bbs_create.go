// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goBack/ent/tn_bbs"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TNBBSCreate is the builder for creating a TN_BBS entity.
type TNBBSCreate struct {
	config
	mutation *TNBBSMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (tc *TNBBSCreate) SetUserID(s string) *TNBBSCreate {
	tc.mutation.SetUserID(s)
	return tc
}

// SetUserName sets the "user_name" field.
func (tc *TNBBSCreate) SetUserName(s string) *TNBBSCreate {
	tc.mutation.SetUserName(s)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TNBBSCreate) SetTitle(s string) *TNBBSCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetContent sets the "content" field.
func (tc *TNBBSCreate) SetContent(s string) *TNBBSCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetDelectYn sets the "delect_yn" field.
func (tc *TNBBSCreate) SetDelectYn(s string) *TNBBSCreate {
	tc.mutation.SetDelectYn(s)
	return tc
}

// SetRegDate sets the "reg_date" field.
func (tc *TNBBSCreate) SetRegDate(s string) *TNBBSCreate {
	tc.mutation.SetRegDate(s)
	return tc
}

// SetUdtDate sets the "udt_date" field.
func (tc *TNBBSCreate) SetUdtDate(s string) *TNBBSCreate {
	tc.mutation.SetUdtDate(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TNBBSCreate) SetID(i int) *TNBBSCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TNBBSMutation object of the builder.
func (tc *TNBBSCreate) Mutation() *TNBBSMutation {
	return tc.mutation
}

// Save creates the TN_BBS in the database.
func (tc *TNBBSCreate) Save(ctx context.Context) (*TN_BBS, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TNBBSCreate) SaveX(ctx context.Context) *TN_BBS {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TNBBSCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TNBBSCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TNBBSCreate) check() error {
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TN_BBS.user_id"`)}
	}
	if _, ok := tc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "TN_BBS.user_name"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TN_BBS.title"`)}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "TN_BBS.content"`)}
	}
	if _, ok := tc.mutation.DelectYn(); !ok {
		return &ValidationError{Name: "delect_yn", err: errors.New(`ent: missing required field "TN_BBS.delect_yn"`)}
	}
	if _, ok := tc.mutation.RegDate(); !ok {
		return &ValidationError{Name: "reg_date", err: errors.New(`ent: missing required field "TN_BBS.reg_date"`)}
	}
	if _, ok := tc.mutation.UdtDate(); !ok {
		return &ValidationError{Name: "udt_date", err: errors.New(`ent: missing required field "TN_BBS.udt_date"`)}
	}
	return nil
}

func (tc *TNBBSCreate) sqlSave(ctx context.Context) (*TN_BBS, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TNBBSCreate) createSpec() (*TN_BBS, *sqlgraph.CreateSpec) {
	var (
		_node = &TN_BBS{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tn_bbs.Table, sqlgraph.NewFieldSpec(tn_bbs.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(tn_bbs.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.UserName(); ok {
		_spec.SetField(tn_bbs.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(tn_bbs.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(tn_bbs.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.DelectYn(); ok {
		_spec.SetField(tn_bbs.FieldDelectYn, field.TypeString, value)
		_node.DelectYn = value
	}
	if value, ok := tc.mutation.RegDate(); ok {
		_spec.SetField(tn_bbs.FieldRegDate, field.TypeString, value)
		_node.RegDate = value
	}
	if value, ok := tc.mutation.UdtDate(); ok {
		_spec.SetField(tn_bbs.FieldUdtDate, field.TypeString, value)
		_node.UdtDate = value
	}
	return _node, _spec
}

// TNBBSCreateBulk is the builder for creating many TN_BBS entities in bulk.
type TNBBSCreateBulk struct {
	config
	err      error
	builders []*TNBBSCreate
}

// Save creates the TN_BBS entities in the database.
func (tcb *TNBBSCreateBulk) Save(ctx context.Context) ([]*TN_BBS, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*TN_BBS, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TNBBSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TNBBSCreateBulk) SaveX(ctx context.Context) []*TN_BBS {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TNBBSCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TNBBSCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
