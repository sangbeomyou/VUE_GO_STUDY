// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"goBack/ent/tn_user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TN_USER is the model entity for the TN_USER schema.
type TN_USER struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// DelectYn holds the value of the "delect_yn" field.
	DelectYn string `json:"delect_yn,omitempty"`
	// RegDate holds the value of the "reg_date" field.
	RegDate string `json:"reg_date,omitempty"`
	// UdtDate holds the value of the "udt_date" field.
	UdtDate      string `json:"udt_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TN_USER) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tn_user.FieldID:
			values[i] = new(sql.NullInt64)
		case tn_user.FieldUserID, tn_user.FieldUserName, tn_user.FieldPassword, tn_user.FieldDelectYn, tn_user.FieldRegDate, tn_user.FieldUdtDate:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TN_USER fields.
func (tu *TN_USER) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tn_user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = int(value.Int64)
		case tn_user.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tu.UserID = value.String
			}
		case tn_user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				tu.UserName = value.String
			}
		case tn_user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				tu.Password = value.String
			}
		case tn_user.FieldDelectYn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delect_yn", values[i])
			} else if value.Valid {
				tu.DelectYn = value.String
			}
		case tn_user.FieldRegDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reg_date", values[i])
			} else if value.Valid {
				tu.RegDate = value.String
			}
		case tn_user.FieldUdtDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field udt_date", values[i])
			} else if value.Valid {
				tu.UdtDate = value.String
			}
		default:
			tu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TN_USER.
// This includes values selected through modifiers, order, etc.
func (tu *TN_USER) Value(name string) (ent.Value, error) {
	return tu.selectValues.Get(name)
}

// Update returns a builder for updating this TN_USER.
// Note that you need to call TN_USER.Unwrap() before calling this method if this TN_USER
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TN_USER) Update() *TNUSERUpdateOne {
	return NewTNUSERClient(tu.config).UpdateOne(tu)
}

// Unwrap unwraps the TN_USER entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TN_USER) Unwrap() *TN_USER {
	_tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TN_USER is not a transactional entity")
	}
	tu.config.driver = _tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TN_USER) String() string {
	var builder strings.Builder
	builder.WriteString("TN_USER(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tu.ID))
	builder.WriteString("user_id=")
	builder.WriteString(tu.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(tu.UserName)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(tu.Password)
	builder.WriteString(", ")
	builder.WriteString("delect_yn=")
	builder.WriteString(tu.DelectYn)
	builder.WriteString(", ")
	builder.WriteString("reg_date=")
	builder.WriteString(tu.RegDate)
	builder.WriteString(", ")
	builder.WriteString("udt_date=")
	builder.WriteString(tu.UdtDate)
	builder.WriteByte(')')
	return builder.String()
}

// TN_USERs is a parsable slice of TN_USER.
type TN_USERs []*TN_USER
